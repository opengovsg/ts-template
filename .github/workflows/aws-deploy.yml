name: AWS Deploy

on:
  workflow_call:
    inputs:
      aws-region:
        description: 'AWS region to use'
        required: true
        default: 'ap-southeast-1'
        type: string
      aws-account-id:
        description: 'AWS account ID to use'
        required: true
        type: string
      cicd-role:
        description: 'AWS IAM role to assume by GitHub action runner'
        required: true
        type: string
      ecr-repository:
        description: 'ECR repository to push image to'
        required: true
        type: string
      ecs-cluster-name:
        description: 'ECS cluster to deploy to'
        required: true
        type: string
      ecs-service-name:
        description: 'ECS service to deploy to'
        required: true
        type: string
      ecs-container-name:
        description: 'Name of container in ECS task definition'
        required: true
        type: string
      codedeploy-application:
        description: 'CodeDeploy application to use'
        required: true
        type: string
      codedeploy-deployment-group:
        description: 'CodeDeploy deployment group to use'
        required: true
        type: string
      image-tag:
        description: 'The locally tagged docker image to push to ECR'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  application-server:
    name: Application server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.cicd-role }}
          role-session-name: github-action-application-deploy
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push image to ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr-repository }}
          IMAGE_TAG: ${{ inputs.image-tag }}
        run: |
          docker image tag $IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Replace AWS_ACCOUNT_ID in task definition file
        id: replace-aws-account-id
        run: |
          sed -i 's/<AWS_ACCOUNT_ID>/${{ inputs.aws-account-id }}/g' ecs-task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-definition.json
          container-name: ${{ inputs.ecs-container-name }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          cluster: ${{ inputs.ecs-cluster-name }}
          service: ${{ inputs.ecs-service-name }}
          wait-for-service-stability: true
          codedeploy-appspec: appspec.json
          codedeploy-application: ${{ inputs.codedeploy-application }}
          codedeploy-deployment-group: ${{ inputs.codedeploy-deployment-group }}
