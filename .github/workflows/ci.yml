name: ci
on:
  push:
  pull_request:
    types: [opened, reopened]
env:
  PRODUCTION_BRANCH: refs/heads/production
  STAGING_BRANCH: refs/heads/staging
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: ".nvmrc"
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - run: npm ci
      - run: npx lockfile-lint --type npm --path frontend/package-lock.json --validate-https --allowed-hosts npm
      - run: npx lockfile-lint --type npm --path backend/package-lock.json --validate-https --allowed-hosts npm
      - name: Ensure that codebase builds, build shared code for dependents
        run: npm run build
      - run: npm run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: ts_template_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: ".nvmrc"
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - run: npm ci
      - name: Compile shared code for dependents
        run: npm run --prefix shared build
      - name: Run tests and generate coverage
        run: npm run coverage
        env:
          POSTGRES_DB: ts_template_test
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./lcov.info

  proceed:
    name: Determine if deploy is needed
    outputs:
      ecs: ${{ steps.determine-ecs.outputs.ecs }}
      fly: ${{ steps.determine-fly.outputs.fly }}
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - id: determine-ecs
        run: |
          if [[ -z "${AWS_ROLE_ARN_STAGING}" || -z "${AWS_ACCOUNT_ID_STAGING}" ]]; then
            echo '::set-output name=ecs::false';
          elif [[ -z "${AWS_ROLE_ARN_PROD}" || -z "${AWS_ACCOUNT_ID_PROD}" ]]; then
            echo '::set-output name=ecs::false';
          elif [[ -z "${ECR_REPO}" || -z "${AWS_REGION}" ]]; then
            echo '::set-output name=ecs::false';
          else
            echo '::set-output name=ecs::true';
          fi
        env:
          AWS_ACCOUNT_ID_STAGING: ${{ secrets.AWS_ACCOUNT_ID_STAGING }}
          AWS_ROLE_ARN_STAGING: ${{ secrets.AWS_ROLE_ARN_STAGING }}
          AWS_ACCOUNT_ID_PROD: ${{ secrets.AWS_ACCOUNT_ID_PROD }}
          AWS_ROLE_ARN_PROD: ${{ secrets.AWS_ROLE_ARN_PROD }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPO: ${{ secrets.ECR_REPO }}
      - id: determine-fly
        run: |
          if [[ -z "${APP_NAME_STAGING}" || -z "${ORG_NAME_STAGING}" ]]; then
            echo '::set-output name=fly::false';
          elif [[ -z "${APP_NAME_PROD}" || -z "${ORG_NAME_PROD}" ]]; then
            echo '::set-output name=fly::false';
          elif [[ -z "${FLY_API_TOKEN}" ]]; then
            echo '::set-output name=fly::false';
          else
            echo '::set-output name=fly::true';
          fi
        env:
          APP_NAME_STAGING: ${{ secrets.APP_NAME_STAGING }}
          ORG_NAME_STAGING: ${{ secrets.ORG_NAME_STAGING }}
          APP_NAME_PROD: ${{ secrets.APP_NAME_PROD }}
          ORG_NAME_PROD: ${{ secrets.ORG_NAME_PROD }}
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  build-docker:
    name: Build Docker image
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.extract-branch.outputs.branch }}
      tag: ${{steps.extract-tag.outputs.tag}}
    steps:
      - uses: actions/checkout@v2
      - name: Extract branch name
        id: extract-branch
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      - name: Extract tag
        id: extract-tag
        shell: bash
        run: echo "##[set-output name=tag;]$(echo ghactions-${BRANCH}-${SHA})"
        env:
          BRANCH: ${{ steps.extract-branch.outputs.branch }}
          SHA: ${{ github.sha }}
      - run: docker build -t ${{ steps.extract-tag.outputs.tag }} -f Dockerfile .

  deploy-ecs-staging:
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: true
    name: Deploy to ECS Staging
    needs: [lint, test, proceed, build-docker]
    if: needs.proceed.outputs.ecs == 'true' && needs.build-docker.outputs.branch == 'staging'
    uses: ./.github/workflows/aws-deploy.yml
    secrets:
      aws-account-id: ${{ secrets.AWS_ACCOUNT_ID_STAGING }}
      cicd-role: ${{ secrets.AWS_ROLE_ARN_STAGING }}
      ecr-repository: ${{ secrets.ECR_REPO }}
    with:
      aws-region: 'ap-southeast-1'
      ecs-cluster-name: 'cluster-application-server'
      ecs-service-name: 'application-server'
      ecs-container-name: 'app'
      codedeploy-application: 'AppECS-cluster-application-server'
      codedeploy-deployment-group: 'DgpECS-cluster-application-server'
      image-tag: ${{ needs.build-docker.outputs.tag }}

  deploy-ecs-production:
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: true
    name: Deploy to ECS Production
    needs: [lint, test, proceed, build-docker]
    if: needs.proceed.outputs.ecs == 'true' && needs.build-docker.outputs.branch == 'production'
    uses: ./.github/workflows/aws-deploy.yml
    secrets:
      aws-account-id: ${{ secrets.AWS_ACCOUNT_ID_PROD }}
      cicd-role: ${{ secrets.AWS_ROLE_ARN_PROD }}
      ecr-repository: ${{ secrets.ECR_REPO }}
    with:
      aws-region: 'ap-southeast-1'
      ecs-cluster-name: 'cluster-application-server'
      ecs-service-name: 'application-server'
      ecs-container-name: 'app'
      codedeploy-application: 'AppECS-cluster-application-server'
      codedeploy-deployment-group: 'DgpECS-cluster-application-server'
      image-tag: ${{ needs.build-docker.outputs.tag }}

  deploy-fly-staging:
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: true
    name: Deploy to Fly.io Staging
    needs: [lint, test, proceed, build-docker]
    if: needs.proceed.outputs.fly == 'true' && needs.build-docker.outputs.branch == 'staging'
    uses: ./.github/workflows/fly-deploy.yml
    secrets:
      app-name: ${{ secrets.APP_NAME_STAGING }}
      fly-api-token: ${{ secrets.FLY_API_TOKEN }}
    with:
      image-tag: ${{ needs.build-docker.outputs.tag }}

  deploy-fly-production:
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: true
    name: Deploy to Fly.io Production
    needs: [lint, test, proceed, build-docker]
    if: needs.proceed.outputs.fly == 'true' && needs.build-docker.outputs.branch == 'production'
    uses: ./.github/workflows/fly-deploy.yml
    secrets:
      app-name: ${{ secrets.APP_NAME_PROD }}
      fly-api-token: ${{ secrets.FLY_API_TOKEN }}
    with:
      image-tag: ${{ needs.build-docker.outputs.tag }}